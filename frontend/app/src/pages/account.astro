---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { is_prod_mode } from '@helpers/env'

import type { JWTCookies, JWT } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
if (!auth_token)
    return Astro.redirect(translatePath('/403/'))

const claim:JWTCookies = Astro.cookies.has('auth_token') ? jose.decodeJwt(auth_token) as JWT : false

if (!claim)
    return Astro.redirect(translatePath('/403/'))

import { semantic_list } from '@helpers/array';

let roles:string[] = []
if (claim.is_superuser) roles.push(t('administrator'))
if (claim.is_staff) roles.push(t('director'))
const roles_semantic_list:string = (roles.length > 0 ? semantic_list(lang, roles) : t('no_roles_assigned'))

import type { Character } from '@dtypes/api.minmatar.org'
import { get_characters } from '@helpers/api.minmatar.org'

let pilots:Character[] = []
let get_characters_error = false;
try {
    pilots = await get_characters(auth_token);
} catch (error) {
    get_characters_error = (is_prod_mode() ? t('get_character_error') : error.message)
}

import Flexblock from '@components/compositions/Flexblock.astro';
import Viewport from '@layouts/Viewport.astro';
import Wrapper from '@components/compositions/Wrapper.astro';
import LogoutIcon from '@components/icons/buttons/LogoutIcon.astro';
import Button from '@components/blocks/Button.astro';
import ComponentBlock from '@components/blocks/ComponentBlock.astro';
import SwitchSquare from '@components/blocks/SwitchSquare.astro';
import DisableBlock from '@components/blocks/DisableBlock.astro';

import PageCover from '@components/page/PageCover.astro';
import PageHeader from '@components/page/PageHeader.astro';
import PageTitle from '@components/page/PageTitle.astro';
import PageBody from '@components/page/PageBody.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import FixedFluid from '@components/compositions/FixedFluid.astro';
import PilotsList from '@components/blocks/PilotsList.astro';
import TextGroup from '@components/blocks/TextGroup.astro';

const page_title = t('account.page_title');
---

<Viewport
    title={page_title}
    alert_dialog={true}
>
    <PageCover
        image="/images/account-cover.jpg"
        image_990="/images/account-cover-990.jpg"
        alt={t('account.cover_alt')}
        animated={false}
        scrollable={true}
        overlay={true}
    />

	<main 
        id="content"
        x-data={`{
            group_name: '',
        }`}
    >
        <PageHeader max_width="var(--max-content-width)">
            <FlexInline justification='space-between'>
                <PageTitle x-text={`group_name != '' ? group_name+' ${t('group')}' : '${page_title}'`}>
                    {page_title}
                </PageTitle>
                <FlexInline>
                    <Button class="[ !hidden md:!flex ]" href={translatePath('/auth/logout/')}>
                        <LogoutIcon slot="icon" />
                        {t('logout')}
                    </Button>
                </FlexInline>
            </FlexInline>
        </PageHeader>

        <PageBody max_width="var(--max-content-width)">
            <form
                method="POST"
                x-data={`{
                    'submitted': false
                }`}
                x-on:submit.prevent="submitted = true;"
            >
                <FixedFluid width="var(--max-text-width)" breakpoint="30%" gap="var(--space-xl)">
                    <Wrapper max_width="var(--max-text-width)" padding_inline="0" padding_block="0" class="[ w-full ]">
                        <Flexblock gap='var(--space-xl)' class="[ w-full ]">
                            <ComponentBlock class="w-full">
                                <FlexInline gap="var(--space-3xl)">
                                    <TextGroup title={t('account_name')} text={claim.username} />
                                    <TextGroup title={t('roles')} text={roles_semantic_list} />
                                </FlexInline>
                            </ComponentBlock>

                            <ComponentBlock class="w-full">
                                <PilotsList
                                    pilots={pilots}
                                    empty_text={get_characters_error ? get_characters_error : t('empty_pilots_text')}
                                    readonly={false}
                                />
                            </ComponentBlock>

                            <Flexblock gap='var(--space-3xs)' class="[ w-full ]">
                                <ComponentBlock
                                    x-data={`{
                                        danger_zone_enable: false
                                    }`}
                                >
                                    <Flexblock gap='var(--space-l)' class="[ w-full ]">
                                        <h2>Danger zone</h2>

                                        <SwitchSquare
                                            class="[ w-full ]"
                                            x-model="danger_zone_enable"
                                            label={t('enable_danger_zone_switch_title')}
                                            description={t('enable_danger_zone_switch_description')}
                                        />

                                        <DisableBlock x_model="danger_zone_enable">
                                            <FlexInline justification='space-between'>
                                                <TextGroup title={t('unregister_account')} text={t('unregister_account_description')} />
                                                <Button type="button" size='sm'>
                                                    {t('unregister_account')}
                                                </Button>
                                            </FlexInline>
                                        </DisableBlock>
                                    </Flexblock>
                                </ComponentBlock>
                            </Flexblock>
                        </Flexblock>
                    </Wrapper>

                    <Wrapper max_width="var(--max-text-width)" padding_inline="0" padding_block="0" class="[ w-full ]">
                        
                    </Wrapper>
                </FixedFluid>
            </form>
        </PageBody>
	</main>
</Viewport>

<style lang="scss">
    h3 {
        margin-block-start: var(--space-l);
    }
</style>